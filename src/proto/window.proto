syntax = "proto3";
package proto;
option go_package = ".;proto";

import "google/protobuf/empty.proto";

service Window {
    // get information about currently focused window
    rpc WindowActiveWindow (google.protobuf.Empty) returns (WindowActiveWindowResponse);

    // stream information about currently focused window as it changes
    rpc WindowActiveWindowStream (google.protobuf.Empty) returns (stream WindowActiveWindowStreamResponse);

    // get information about all windows
    rpc WindowWindows (google.protobuf.Empty) returns (WindowWindowsResponse);

    // get information about windows as they change
    rpc WindowWindowsStream (google.protobuf.Empty) returns (stream WindowWindowsStreamResponse);
}

message WindowInfo {
    string title = 1;
    string path = 2;
    int64 pid = 3;
    int32 x = 4;
    int32 y = 5;
    int32 width = 6;
    int32 height = 7;
}

enum WindowAction {
    WINDOW_ACTION_UNKNOWN = 0;
    WINDOW_ACTION_FOCUSED = 1;
    WINDOW_ACTION_UNFOCUSED = 2;
    WINDOW_ACTION_OPENED = 3;
    WINDOW_ACTION_CLOSED = 4;
}
// Note: New windows that open and take focus will be considered two separate actions.
// One action for opening (WINDOW_ACTION_OPENED) and one action for focusing (WINDOW_ACTION_FOCUSED).

message WindowActiveWindowResponse {
    WindowInfo window = 1;
}

message WindowActiveWindowStreamResponse {
    WindowInfo window = 1;
}

message WindowWindowsResponse {
    repeated WindowInfo window = 1;
}

message WindowWindowsStreamResponse {
    WindowInfo window = 1;
    WindowAction action = 2;
}
