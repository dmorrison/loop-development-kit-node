"use strict";
// source: process.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.proto.ProcessAction', null, global);
goog.exportSymbol('proto.proto.ProcessDiffStreamResponse', null, global);
goog.exportSymbol('proto.proto.ProcessInfo', null, global);
goog.exportSymbol('proto.proto.ProcessListResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ProcessInfo = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ProcessInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ProcessInfo.displayName = 'proto.proto.ProcessInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ProcessDiffStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ProcessDiffStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ProcessDiffStreamResponse.displayName = 'proto.proto.ProcessDiffStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ProcessListResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ProcessListResponse.repeatedFields_, null);
};
goog.inherits(proto.proto.ProcessListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.ProcessListResponse.displayName = 'proto.proto.ProcessListResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ProcessInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ProcessInfo.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ProcessInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ProcessInfo.toObject = function (includeInstance, msg) {
        var f, obj = {
            pid: jspb.Message.getFieldWithDefault(msg, 1, 0),
            command: jspb.Message.getFieldWithDefault(msg, 2, ""),
            arguments: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ProcessInfo}
 */
proto.proto.ProcessInfo.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ProcessInfo;
    return proto.proto.ProcessInfo.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ProcessInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ProcessInfo}
 */
proto.proto.ProcessInfo.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setPid(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setCommand(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setArguments(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ProcessInfo.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ProcessInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ProcessInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ProcessInfo.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPid();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getCommand();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getArguments();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional int32 pid = 1;
 * @return {number}
 */
proto.proto.ProcessInfo.prototype.getPid = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.ProcessInfo} returns this
 */
proto.proto.ProcessInfo.prototype.setPid = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional string command = 2;
 * @return {string}
 */
proto.proto.ProcessInfo.prototype.getCommand = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ProcessInfo} returns this
 */
proto.proto.ProcessInfo.prototype.setCommand = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string arguments = 3;
 * @return {string}
 */
proto.proto.ProcessInfo.prototype.getArguments = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ProcessInfo} returns this
 */
proto.proto.ProcessInfo.prototype.setArguments = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ProcessDiffStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ProcessDiffStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ProcessDiffStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ProcessDiffStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            process: jspb.Message.getFieldWithDefault(msg, 1, ""),
            action: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ProcessDiffStreamResponse}
 */
proto.proto.ProcessDiffStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ProcessDiffStreamResponse;
    return proto.proto.ProcessDiffStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ProcessDiffStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ProcessDiffStreamResponse}
 */
proto.proto.ProcessDiffStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setProcess(value);
                break;
            case 2:
                var value = /** @type {!proto.proto.ProcessAction} */ (reader.readEnum());
                msg.setAction(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ProcessDiffStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ProcessDiffStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ProcessDiffStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ProcessDiffStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getProcess();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getAction();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * optional string process = 1;
 * @return {string}
 */
proto.proto.ProcessDiffStreamResponse.prototype.getProcess = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.ProcessDiffStreamResponse} returns this
 */
proto.proto.ProcessDiffStreamResponse.prototype.setProcess = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional ProcessAction action = 2;
 * @return {!proto.proto.ProcessAction}
 */
proto.proto.ProcessDiffStreamResponse.prototype.getAction = function () {
    return /** @type {!proto.proto.ProcessAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {!proto.proto.ProcessAction} value
 * @return {!proto.proto.ProcessDiffStreamResponse} returns this
 */
proto.proto.ProcessDiffStreamResponse.prototype.setAction = function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ProcessListResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.ProcessListResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.ProcessListResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.ProcessListResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.ProcessListResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            processesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ProcessListResponse}
 */
proto.proto.ProcessListResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.ProcessListResponse;
    return proto.proto.ProcessListResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ProcessListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ProcessListResponse}
 */
proto.proto.ProcessListResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.addProcesses(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ProcessListResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.ProcessListResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ProcessListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ProcessListResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getProcessesList();
    if (f.length > 0) {
        writer.writeRepeatedString(1, f);
    }
};
/**
 * repeated string processes = 1;
 * @return {!Array<string>}
 */
proto.proto.ProcessListResponse.prototype.getProcessesList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.proto.ProcessListResponse} returns this
 */
proto.proto.ProcessListResponse.prototype.setProcessesList = function (value) {
    return jspb.Message.setField(this, 1, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.ProcessListResponse} returns this
 */
proto.proto.ProcessListResponse.prototype.addProcesses = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ProcessListResponse} returns this
 */
proto.proto.ProcessListResponse.prototype.clearProcessesList = function () {
    return this.setProcessesList([]);
};
/**
 * @enum {number}
 */
proto.proto.ProcessAction = {
    PROCESS_ACTION_UNKNOWN: 0,
    PROCESS_ACTION_STARTED: 1,
    PROCESS_ACTION_STOPPED: 2
};
goog.object.extend(exports, proto.proto);
