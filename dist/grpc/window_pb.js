"use strict";
// source: window.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.proto.WindowAction', null, global);
goog.exportSymbol('proto.proto.WindowActiveWindowResponse', null, global);
goog.exportSymbol('proto.proto.WindowActiveWindowStreamResponse', null, global);
goog.exportSymbol('proto.proto.WindowInfo', null, global);
goog.exportSymbol('proto.proto.WindowWindowsResponse', null, global);
goog.exportSymbol('proto.proto.WindowWindowsStreamResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WindowInfo = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WindowInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WindowInfo.displayName = 'proto.proto.WindowInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WindowActiveWindowResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WindowActiveWindowResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WindowActiveWindowResponse.displayName = 'proto.proto.WindowActiveWindowResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WindowActiveWindowStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WindowActiveWindowStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WindowActiveWindowStreamResponse.displayName = 'proto.proto.WindowActiveWindowStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WindowWindowsResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.WindowWindowsResponse.repeatedFields_, null);
};
goog.inherits(proto.proto.WindowWindowsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WindowWindowsResponse.displayName = 'proto.proto.WindowWindowsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WindowWindowsStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WindowWindowsStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WindowWindowsStreamResponse.displayName = 'proto.proto.WindowWindowsStreamResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WindowInfo.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WindowInfo.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WindowInfo} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WindowInfo.toObject = function (includeInstance, msg) {
        var f, obj = {
            title: jspb.Message.getFieldWithDefault(msg, 1, ""),
            path: jspb.Message.getFieldWithDefault(msg, 2, ""),
            pid: jspb.Message.getFieldWithDefault(msg, 3, 0),
            x: jspb.Message.getFieldWithDefault(msg, 4, 0),
            y: jspb.Message.getFieldWithDefault(msg, 5, 0),
            width: jspb.Message.getFieldWithDefault(msg, 6, 0),
            height: jspb.Message.getFieldWithDefault(msg, 7, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WindowInfo}
 */
proto.proto.WindowInfo.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WindowInfo;
    return proto.proto.WindowInfo.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WindowInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WindowInfo}
 */
proto.proto.WindowInfo.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setTitle(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPath(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readInt64());
                msg.setPid(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setX(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setY(value);
                break;
            case 6:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setWidth(value);
                break;
            case 7:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setHeight(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WindowInfo.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WindowInfo.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WindowInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WindowInfo.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getTitle();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPath();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getPid();
    if (f !== 0) {
        writer.writeInt64(3, f);
    }
    f = message.getX();
    if (f !== 0) {
        writer.writeInt32(4, f);
    }
    f = message.getY();
    if (f !== 0) {
        writer.writeInt32(5, f);
    }
    f = message.getWidth();
    if (f !== 0) {
        writer.writeInt32(6, f);
    }
    f = message.getHeight();
    if (f !== 0) {
        writer.writeInt32(7, f);
    }
};
/**
 * optional string title = 1;
 * @return {string}
 */
proto.proto.WindowInfo.prototype.getTitle = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setTitle = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string path = 2;
 * @return {string}
 */
proto.proto.WindowInfo.prototype.getPath = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setPath = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional int64 pid = 3;
 * @return {number}
 */
proto.proto.WindowInfo.prototype.getPid = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setPid = function (value) {
    return jspb.Message.setProto3IntField(this, 3, value);
};
/**
 * optional int32 x = 4;
 * @return {number}
 */
proto.proto.WindowInfo.prototype.getX = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setX = function (value) {
    return jspb.Message.setProto3IntField(this, 4, value);
};
/**
 * optional int32 y = 5;
 * @return {number}
 */
proto.proto.WindowInfo.prototype.getY = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setY = function (value) {
    return jspb.Message.setProto3IntField(this, 5, value);
};
/**
 * optional int32 width = 6;
 * @return {number}
 */
proto.proto.WindowInfo.prototype.getWidth = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setWidth = function (value) {
    return jspb.Message.setProto3IntField(this, 6, value);
};
/**
 * optional int32 height = 7;
 * @return {number}
 */
proto.proto.WindowInfo.prototype.getHeight = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WindowInfo} returns this
 */
proto.proto.WindowInfo.prototype.setHeight = function (value) {
    return jspb.Message.setProto3IntField(this, 7, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WindowActiveWindowResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WindowActiveWindowResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WindowActiveWindowResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WindowActiveWindowResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            window: (f = msg.getWindow()) && proto.proto.WindowInfo.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WindowActiveWindowResponse}
 */
proto.proto.WindowActiveWindowResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WindowActiveWindowResponse;
    return proto.proto.WindowActiveWindowResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WindowActiveWindowResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WindowActiveWindowResponse}
 */
proto.proto.WindowActiveWindowResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WindowInfo;
                reader.readMessage(value, proto.proto.WindowInfo.deserializeBinaryFromReader);
                msg.setWindow(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WindowActiveWindowResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WindowActiveWindowResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WindowActiveWindowResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WindowActiveWindowResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWindow();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WindowInfo.serializeBinaryToWriter);
    }
};
/**
 * optional WindowInfo window = 1;
 * @return {?proto.proto.WindowInfo}
 */
proto.proto.WindowActiveWindowResponse.prototype.getWindow = function () {
    return /** @type{?proto.proto.WindowInfo} */ (jspb.Message.getWrapperField(this, proto.proto.WindowInfo, 1));
};
/**
 * @param {?proto.proto.WindowInfo|undefined} value
 * @return {!proto.proto.WindowActiveWindowResponse} returns this
*/
proto.proto.WindowActiveWindowResponse.prototype.setWindow = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WindowActiveWindowResponse} returns this
 */
proto.proto.WindowActiveWindowResponse.prototype.clearWindow = function () {
    return this.setWindow(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WindowActiveWindowResponse.prototype.hasWindow = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WindowActiveWindowStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WindowActiveWindowStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WindowActiveWindowStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WindowActiveWindowStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            window: (f = msg.getWindow()) && proto.proto.WindowInfo.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WindowActiveWindowStreamResponse}
 */
proto.proto.WindowActiveWindowStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WindowActiveWindowStreamResponse;
    return proto.proto.WindowActiveWindowStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WindowActiveWindowStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WindowActiveWindowStreamResponse}
 */
proto.proto.WindowActiveWindowStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WindowInfo;
                reader.readMessage(value, proto.proto.WindowInfo.deserializeBinaryFromReader);
                msg.setWindow(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WindowActiveWindowStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WindowActiveWindowStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WindowActiveWindowStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WindowActiveWindowStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWindow();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WindowInfo.serializeBinaryToWriter);
    }
};
/**
 * optional WindowInfo window = 1;
 * @return {?proto.proto.WindowInfo}
 */
proto.proto.WindowActiveWindowStreamResponse.prototype.getWindow = function () {
    return /** @type{?proto.proto.WindowInfo} */ (jspb.Message.getWrapperField(this, proto.proto.WindowInfo, 1));
};
/**
 * @param {?proto.proto.WindowInfo|undefined} value
 * @return {!proto.proto.WindowActiveWindowStreamResponse} returns this
*/
proto.proto.WindowActiveWindowStreamResponse.prototype.setWindow = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WindowActiveWindowStreamResponse} returns this
 */
proto.proto.WindowActiveWindowStreamResponse.prototype.clearWindow = function () {
    return this.setWindow(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WindowActiveWindowStreamResponse.prototype.hasWindow = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.WindowWindowsResponse.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WindowWindowsResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WindowWindowsResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WindowWindowsResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WindowWindowsResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            windowList: jspb.Message.toObjectList(msg.getWindowList(), proto.proto.WindowInfo.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WindowWindowsResponse}
 */
proto.proto.WindowWindowsResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WindowWindowsResponse;
    return proto.proto.WindowWindowsResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WindowWindowsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WindowWindowsResponse}
 */
proto.proto.WindowWindowsResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WindowInfo;
                reader.readMessage(value, proto.proto.WindowInfo.deserializeBinaryFromReader);
                msg.addWindow(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WindowWindowsResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WindowWindowsResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WindowWindowsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WindowWindowsResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWindowList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.proto.WindowInfo.serializeBinaryToWriter);
    }
};
/**
 * repeated WindowInfo window = 1;
 * @return {!Array<!proto.proto.WindowInfo>}
 */
proto.proto.WindowWindowsResponse.prototype.getWindowList = function () {
    return /** @type{!Array<!proto.proto.WindowInfo>} */ (jspb.Message.getRepeatedWrapperField(this, proto.proto.WindowInfo, 1));
};
/**
 * @param {!Array<!proto.proto.WindowInfo>} value
 * @return {!proto.proto.WindowWindowsResponse} returns this
*/
proto.proto.WindowWindowsResponse.prototype.setWindowList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.proto.WindowInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.WindowInfo}
 */
proto.proto.WindowWindowsResponse.prototype.addWindow = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.WindowInfo, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.WindowWindowsResponse} returns this
 */
proto.proto.WindowWindowsResponse.prototype.clearWindowList = function () {
    return this.setWindowList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WindowWindowsStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WindowWindowsStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WindowWindowsStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WindowWindowsStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            window: (f = msg.getWindow()) && proto.proto.WindowInfo.toObject(includeInstance, f),
            action: jspb.Message.getFieldWithDefault(msg, 2, 0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WindowWindowsStreamResponse}
 */
proto.proto.WindowWindowsStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WindowWindowsStreamResponse;
    return proto.proto.WindowWindowsStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WindowWindowsStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WindowWindowsStreamResponse}
 */
proto.proto.WindowWindowsStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WindowInfo;
                reader.readMessage(value, proto.proto.WindowInfo.deserializeBinaryFromReader);
                msg.setWindow(value);
                break;
            case 2:
                var value = /** @type {!proto.proto.WindowAction} */ (reader.readEnum());
                msg.setAction(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WindowWindowsStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WindowWindowsStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WindowWindowsStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WindowWindowsStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWindow();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WindowInfo.serializeBinaryToWriter);
    }
    f = message.getAction();
    if (f !== 0.0) {
        writer.writeEnum(2, f);
    }
};
/**
 * optional WindowInfo window = 1;
 * @return {?proto.proto.WindowInfo}
 */
proto.proto.WindowWindowsStreamResponse.prototype.getWindow = function () {
    return /** @type{?proto.proto.WindowInfo} */ (jspb.Message.getWrapperField(this, proto.proto.WindowInfo, 1));
};
/**
 * @param {?proto.proto.WindowInfo|undefined} value
 * @return {!proto.proto.WindowWindowsStreamResponse} returns this
*/
proto.proto.WindowWindowsStreamResponse.prototype.setWindow = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WindowWindowsStreamResponse} returns this
 */
proto.proto.WindowWindowsStreamResponse.prototype.clearWindow = function () {
    return this.setWindow(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WindowWindowsStreamResponse.prototype.hasWindow = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional WindowAction action = 2;
 * @return {!proto.proto.WindowAction}
 */
proto.proto.WindowWindowsStreamResponse.prototype.getAction = function () {
    return /** @type {!proto.proto.WindowAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};
/**
 * @param {!proto.proto.WindowAction} value
 * @return {!proto.proto.WindowWindowsStreamResponse} returns this
 */
proto.proto.WindowWindowsStreamResponse.prototype.setAction = function (value) {
    return jspb.Message.setProto3EnumField(this, 2, value);
};
/**
 * @enum {number}
 */
proto.proto.WindowAction = {
    WINDOW_ACTION_UNKNOWN: 0,
    WINDOW_ACTION_FOCUSED: 1,
    WINDOW_ACTION_UNFOCUSED: 2,
    WINDOW_ACTION_OPENED: 3,
    WINDOW_ACTION_CLOSED: 4
};
goog.object.extend(exports, proto.proto);
