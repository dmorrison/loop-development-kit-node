"use strict";
// source: whisper.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.proto.WhisperMsg', null, global);
goog.exportSymbol('proto.proto.WhisperNewRequest', null, global);
goog.exportSymbol('proto.proto.WhisperNewResponse', null, global);
goog.exportSymbol('proto.proto.WhisperStyle', null, global);
goog.exportSymbol('proto.proto.WhisperUpdateRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperStyle = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperStyle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperStyle.displayName = 'proto.proto.WhisperStyle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperMsg = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperMsg.displayName = 'proto.proto.WhisperMsg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperNewRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperNewRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperNewRequest.displayName = 'proto.proto.WhisperNewRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperNewResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperNewResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperNewResponse.displayName = 'proto.proto.WhisperNewResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperUpdateRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperUpdateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperUpdateRequest.displayName = 'proto.proto.WhisperUpdateRequest';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperStyle.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperStyle.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperStyle} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperStyle.toObject = function (includeInstance, msg) {
        var f, obj = {
            backgroundcolor: jspb.Message.getFieldWithDefault(msg, 1, ""),
            primarycolor: jspb.Message.getFieldWithDefault(msg, 2, ""),
            highlightcolor: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperStyle}
 */
proto.proto.WhisperStyle.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperStyle;
    return proto.proto.WhisperStyle.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperStyle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperStyle}
 */
proto.proto.WhisperStyle.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBackgroundcolor(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPrimarycolor(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setHighlightcolor(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperStyle.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperStyle.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperStyle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperStyle.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBackgroundcolor();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPrimarycolor();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getHighlightcolor();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string backgroundColor = 1;
 * @return {string}
 */
proto.proto.WhisperStyle.prototype.getBackgroundcolor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperStyle} returns this
 */
proto.proto.WhisperStyle.prototype.setBackgroundcolor = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string primaryColor = 2;
 * @return {string}
 */
proto.proto.WhisperStyle.prototype.getPrimarycolor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperStyle} returns this
 */
proto.proto.WhisperStyle.prototype.setPrimarycolor = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string highlightColor = 3;
 * @return {string}
 */
proto.proto.WhisperStyle.prototype.getHighlightcolor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperStyle} returns this
 */
proto.proto.WhisperStyle.prototype.setHighlightcolor = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperMsg.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperMsg.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperMsg} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperMsg.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            markdown: jspb.Message.getFieldWithDefault(msg, 2, ""),
            icon: jspb.Message.getFieldWithDefault(msg, 3, ""),
            style: (f = msg.getStyle()) && proto.proto.WhisperStyle.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperMsg}
 */
proto.proto.WhisperMsg.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperMsg;
    return proto.proto.WhisperMsg.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperMsg}
 */
proto.proto.WhisperMsg.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setMarkdown(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setIcon(value);
                break;
            case 4:
                var value = new proto.proto.WhisperStyle;
                reader.readMessage(value, proto.proto.WhisperStyle.deserializeBinaryFromReader);
                msg.setStyle(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperMsg.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperMsg.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperMsg.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getMarkdown();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getIcon();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getStyle();
    if (f != null) {
        writer.writeMessage(4, f, proto.proto.WhisperStyle.serializeBinaryToWriter);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperMsg.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperMsg} returns this
 */
proto.proto.WhisperMsg.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string markdown = 2;
 * @return {string}
 */
proto.proto.WhisperMsg.prototype.getMarkdown = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperMsg} returns this
 */
proto.proto.WhisperMsg.prototype.setMarkdown = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string icon = 3;
 * @return {string}
 */
proto.proto.WhisperMsg.prototype.getIcon = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperMsg} returns this
 */
proto.proto.WhisperMsg.prototype.setIcon = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional WhisperStyle style = 4;
 * @return {?proto.proto.WhisperStyle}
 */
proto.proto.WhisperMsg.prototype.getStyle = function () {
    return /** @type{?proto.proto.WhisperStyle} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperStyle, 4));
};
/**
 * @param {?proto.proto.WhisperStyle|undefined} value
 * @return {!proto.proto.WhisperMsg} returns this
*/
proto.proto.WhisperMsg.prototype.setStyle = function (value) {
    return jspb.Message.setWrapperField(this, 4, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperMsg} returns this
 */
proto.proto.WhisperMsg.prototype.clearStyle = function () {
    return this.setStyle(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperMsg.prototype.hasStyle = function () {
    return jspb.Message.getField(this, 4) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperNewRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperNewRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperNewRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperNewRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            whisper: (f = msg.getWhisper()) && proto.proto.WhisperMsg.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperNewRequest}
 */
proto.proto.WhisperNewRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperNewRequest;
    return proto.proto.WhisperNewRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperNewRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperNewRequest}
 */
proto.proto.WhisperNewRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WhisperMsg;
                reader.readMessage(value, proto.proto.WhisperMsg.deserializeBinaryFromReader);
                msg.setWhisper(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperNewRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperNewRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperNewRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperNewRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getWhisper();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WhisperMsg.serializeBinaryToWriter);
    }
};
/**
 * optional WhisperMsg whisper = 1;
 * @return {?proto.proto.WhisperMsg}
 */
proto.proto.WhisperNewRequest.prototype.getWhisper = function () {
    return /** @type{?proto.proto.WhisperMsg} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperMsg, 1));
};
/**
 * @param {?proto.proto.WhisperMsg|undefined} value
 * @return {!proto.proto.WhisperNewRequest} returns this
*/
proto.proto.WhisperNewRequest.prototype.setWhisper = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperNewRequest} returns this
 */
proto.proto.WhisperNewRequest.prototype.clearWhisper = function () {
    return this.setWhisper(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperNewRequest.prototype.hasWhisper = function () {
    return jspb.Message.getField(this, 1) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperNewResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperNewResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperNewResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperNewResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperNewResponse}
 */
proto.proto.WhisperNewResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperNewResponse;
    return proto.proto.WhisperNewResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperNewResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperNewResponse}
 */
proto.proto.WhisperNewResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperNewResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperNewResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperNewResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperNewResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.WhisperNewResponse.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperNewResponse} returns this
 */
proto.proto.WhisperNewResponse.prototype.setId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperUpdateRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperUpdateRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperUpdateRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperUpdateRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ""),
            whisper: (f = msg.getWhisper()) && proto.proto.WhisperMsg.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperUpdateRequest}
 */
proto.proto.WhisperUpdateRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperUpdateRequest;
    return proto.proto.WhisperUpdateRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperUpdateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperUpdateRequest}
 */
proto.proto.WhisperUpdateRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setId(value);
                break;
            case 2:
                var value = new proto.proto.WhisperMsg;
                reader.readMessage(value, proto.proto.WhisperMsg.deserializeBinaryFromReader);
                msg.setWhisper(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperUpdateRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperUpdateRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperUpdateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperUpdateRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getId();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getWhisper();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperMsg.serializeBinaryToWriter);
    }
};
/**
 * optional string id = 1;
 * @return {string}
 */
proto.proto.WhisperUpdateRequest.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperUpdateRequest} returns this
 */
proto.proto.WhisperUpdateRequest.prototype.setId = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional WhisperMsg whisper = 2;
 * @return {?proto.proto.WhisperMsg}
 */
proto.proto.WhisperUpdateRequest.prototype.getWhisper = function () {
    return /** @type{?proto.proto.WhisperMsg} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperMsg, 2));
};
/**
 * @param {?proto.proto.WhisperMsg|undefined} value
 * @return {!proto.proto.WhisperUpdateRequest} returns this
*/
proto.proto.WhisperUpdateRequest.prototype.setWhisper = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperUpdateRequest} returns this
 */
proto.proto.WhisperUpdateRequest.prototype.clearWhisper = function () {
    return this.setWhisper(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperUpdateRequest.prototype.hasWhisper = function () {
    return jspb.Message.getField(this, 2) != null;
};
goog.object.extend(exports, proto.proto);
