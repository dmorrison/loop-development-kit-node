"use strict";
// source: keyboard.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.proto.KeyboardHotkey', null, global);
goog.exportSymbol('proto.proto.KeyboardHotkeyStreamRequest', null, global);
goog.exportSymbol('proto.proto.KeyboardHotkeyStreamResponse', null, global);
goog.exportSymbol('proto.proto.KeyboardModifiers', null, global);
goog.exportSymbol('proto.proto.KeyboardScancodeStreamResponse', null, global);
goog.exportSymbol('proto.proto.KeyboardTextChunkStreamResponse', null, global);
goog.exportSymbol('proto.proto.KeyboardTextStreamResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardModifiers = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyboardModifiers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardModifiers.displayName = 'proto.proto.KeyboardModifiers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardHotkey = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyboardHotkey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardHotkey.displayName = 'proto.proto.KeyboardHotkey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardHotkeyStreamRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.KeyboardHotkeyStreamRequest.repeatedFields_, null);
};
goog.inherits(proto.proto.KeyboardHotkeyStreamRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardHotkeyStreamRequest.displayName = 'proto.proto.KeyboardHotkeyStreamRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardHotkeyStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyboardHotkeyStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardHotkeyStreamResponse.displayName = 'proto.proto.KeyboardHotkeyStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardScancodeStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyboardScancodeStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardScancodeStreamResponse.displayName = 'proto.proto.KeyboardScancodeStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardTextChunkStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyboardTextChunkStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardTextChunkStreamResponse.displayName = 'proto.proto.KeyboardTextChunkStreamResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyboardTextStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyboardTextStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.KeyboardTextStreamResponse.displayName = 'proto.proto.KeyboardTextStreamResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardModifiers.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardModifiers.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardModifiers} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardModifiers.toObject = function (includeInstance, msg) {
        var f, obj = {
            altl: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
            altr: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
            ctrll: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
            ctrlr: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
            metal: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
            metar: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
            shiftl: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
            shiftr: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardModifiers}
 */
proto.proto.KeyboardModifiers.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardModifiers;
    return proto.proto.KeyboardModifiers.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardModifiers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardModifiers}
 */
proto.proto.KeyboardModifiers.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setAltl(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setAltr(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setCtrll(value);
                break;
            case 4:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setCtrlr(value);
                break;
            case 5:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMetal(value);
                break;
            case 6:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setMetar(value);
                break;
            case 7:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setShiftl(value);
                break;
            case 8:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setShiftr(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardModifiers.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardModifiers.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardModifiers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardModifiers.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getAltl();
    if (f) {
        writer.writeBool(1, f);
    }
    f = message.getAltr();
    if (f) {
        writer.writeBool(2, f);
    }
    f = message.getCtrll();
    if (f) {
        writer.writeBool(3, f);
    }
    f = message.getCtrlr();
    if (f) {
        writer.writeBool(4, f);
    }
    f = message.getMetal();
    if (f) {
        writer.writeBool(5, f);
    }
    f = message.getMetar();
    if (f) {
        writer.writeBool(6, f);
    }
    f = message.getShiftl();
    if (f) {
        writer.writeBool(7, f);
    }
    f = message.getShiftr();
    if (f) {
        writer.writeBool(8, f);
    }
};
/**
 * optional bool altL = 1;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getAltl = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setAltl = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
/**
 * optional bool altR = 2;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getAltr = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setAltr = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};
/**
 * optional bool ctrlL = 3;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getCtrll = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setCtrll = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};
/**
 * optional bool ctrlR = 4;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getCtrlr = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setCtrlr = function (value) {
    return jspb.Message.setProto3BooleanField(this, 4, value);
};
/**
 * optional bool metaL = 5;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getMetal = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setMetal = function (value) {
    return jspb.Message.setProto3BooleanField(this, 5, value);
};
/**
 * optional bool metaR = 6;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getMetar = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setMetar = function (value) {
    return jspb.Message.setProto3BooleanField(this, 6, value);
};
/**
 * optional bool shiftL = 7;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getShiftl = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setShiftl = function (value) {
    return jspb.Message.setProto3BooleanField(this, 7, value);
};
/**
 * optional bool shiftR = 8;
 * @return {boolean}
 */
proto.proto.KeyboardModifiers.prototype.getShiftr = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardModifiers} returns this
 */
proto.proto.KeyboardModifiers.prototype.setShiftr = function (value) {
    return jspb.Message.setProto3BooleanField(this, 8, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardHotkey.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardHotkey.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardHotkey} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardHotkey.toObject = function (includeInstance, msg) {
        var f, obj = {
            scancode: jspb.Message.getFieldWithDefault(msg, 1, 0),
            modifiers: (f = msg.getModifiers()) && proto.proto.KeyboardModifiers.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardHotkey}
 */
proto.proto.KeyboardHotkey.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardHotkey;
    return proto.proto.KeyboardHotkey.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardHotkey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardHotkey}
 */
proto.proto.KeyboardHotkey.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setScancode(value);
                break;
            case 2:
                var value = new proto.proto.KeyboardModifiers;
                reader.readMessage(value, proto.proto.KeyboardModifiers.deserializeBinaryFromReader);
                msg.setModifiers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardHotkey.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardHotkey.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardHotkey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardHotkey.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getScancode();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getModifiers();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.KeyboardModifiers.serializeBinaryToWriter);
    }
};
/**
 * optional int32 scancode = 1;
 * @return {number}
 */
proto.proto.KeyboardHotkey.prototype.getScancode = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.KeyboardHotkey} returns this
 */
proto.proto.KeyboardHotkey.prototype.setScancode = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional KeyboardModifiers modifiers = 2;
 * @return {?proto.proto.KeyboardModifiers}
 */
proto.proto.KeyboardHotkey.prototype.getModifiers = function () {
    return /** @type{?proto.proto.KeyboardModifiers} */ (jspb.Message.getWrapperField(this, proto.proto.KeyboardModifiers, 2));
};
/**
 * @param {?proto.proto.KeyboardModifiers|undefined} value
 * @return {!proto.proto.KeyboardHotkey} returns this
*/
proto.proto.KeyboardHotkey.prototype.setModifiers = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.KeyboardHotkey} returns this
 */
proto.proto.KeyboardHotkey.prototype.clearModifiers = function () {
    return this.setModifiers(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.KeyboardHotkey.prototype.hasModifiers = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.KeyboardHotkeyStreamRequest.repeatedFields_ = [1];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardHotkeyStreamRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardHotkeyStreamRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardHotkeyStreamRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardHotkeyStreamRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            hotkeysList: jspb.Message.toObjectList(msg.getHotkeysList(), proto.proto.KeyboardHotkey.toObject, includeInstance)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardHotkeyStreamRequest}
 */
proto.proto.KeyboardHotkeyStreamRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardHotkeyStreamRequest;
    return proto.proto.KeyboardHotkeyStreamRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardHotkeyStreamRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardHotkeyStreamRequest}
 */
proto.proto.KeyboardHotkeyStreamRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.KeyboardHotkey;
                reader.readMessage(value, proto.proto.KeyboardHotkey.deserializeBinaryFromReader);
                msg.addHotkeys(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardHotkeyStreamRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardHotkeyStreamRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardHotkeyStreamRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardHotkeyStreamRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getHotkeysList();
    if (f.length > 0) {
        writer.writeRepeatedMessage(1, f, proto.proto.KeyboardHotkey.serializeBinaryToWriter);
    }
};
/**
 * repeated KeyboardHotkey hotkeys = 1;
 * @return {!Array<!proto.proto.KeyboardHotkey>}
 */
proto.proto.KeyboardHotkeyStreamRequest.prototype.getHotkeysList = function () {
    return /** @type{!Array<!proto.proto.KeyboardHotkey>} */ (jspb.Message.getRepeatedWrapperField(this, proto.proto.KeyboardHotkey, 1));
};
/**
 * @param {!Array<!proto.proto.KeyboardHotkey>} value
 * @return {!proto.proto.KeyboardHotkeyStreamRequest} returns this
*/
proto.proto.KeyboardHotkeyStreamRequest.prototype.setHotkeysList = function (value) {
    return jspb.Message.setRepeatedWrapperField(this, 1, value);
};
/**
 * @param {!proto.proto.KeyboardHotkey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.KeyboardHotkey}
 */
proto.proto.KeyboardHotkeyStreamRequest.prototype.addHotkeys = function (opt_value, opt_index) {
    return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.KeyboardHotkey, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.KeyboardHotkeyStreamRequest} returns this
 */
proto.proto.KeyboardHotkeyStreamRequest.prototype.clearHotkeysList = function () {
    return this.setHotkeysList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardHotkeyStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardHotkeyStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardHotkeyStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardHotkeyStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            pressed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardHotkeyStreamResponse}
 */
proto.proto.KeyboardHotkeyStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardHotkeyStreamResponse;
    return proto.proto.KeyboardHotkeyStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardHotkeyStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardHotkeyStreamResponse}
 */
proto.proto.KeyboardHotkeyStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setPressed(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardHotkeyStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardHotkeyStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardHotkeyStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardHotkeyStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getPressed();
    if (f) {
        writer.writeBool(2, f);
    }
};
/**
 * optional bool pressed = 2;
 * @return {boolean}
 */
proto.proto.KeyboardHotkeyStreamResponse.prototype.getPressed = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardHotkeyStreamResponse} returns this
 */
proto.proto.KeyboardHotkeyStreamResponse.prototype.setPressed = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardScancodeStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardScancodeStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardScancodeStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardScancodeStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            scancode: jspb.Message.getFieldWithDefault(msg, 1, 0),
            pressed: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardScancodeStreamResponse}
 */
proto.proto.KeyboardScancodeStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardScancodeStreamResponse;
    return proto.proto.KeyboardScancodeStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardScancodeStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardScancodeStreamResponse}
 */
proto.proto.KeyboardScancodeStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readInt32());
                msg.setScancode(value);
                break;
            case 2:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setPressed(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardScancodeStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardScancodeStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardScancodeStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardScancodeStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getScancode();
    if (f !== 0) {
        writer.writeInt32(1, f);
    }
    f = message.getPressed();
    if (f) {
        writer.writeBool(2, f);
    }
};
/**
 * optional int32 scancode = 1;
 * @return {number}
 */
proto.proto.KeyboardScancodeStreamResponse.prototype.getScancode = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};
/**
 * @param {number} value
 * @return {!proto.proto.KeyboardScancodeStreamResponse} returns this
 */
proto.proto.KeyboardScancodeStreamResponse.prototype.setScancode = function (value) {
    return jspb.Message.setProto3IntField(this, 1, value);
};
/**
 * optional bool pressed = 2;
 * @return {boolean}
 */
proto.proto.KeyboardScancodeStreamResponse.prototype.getPressed = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.KeyboardScancodeStreamResponse} returns this
 */
proto.proto.KeyboardScancodeStreamResponse.prototype.setPressed = function (value) {
    return jspb.Message.setProto3BooleanField(this, 2, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardTextChunkStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardTextChunkStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardTextChunkStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardTextChunkStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            text: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardTextChunkStreamResponse}
 */
proto.proto.KeyboardTextChunkStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardTextChunkStreamResponse;
    return proto.proto.KeyboardTextChunkStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardTextChunkStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardTextChunkStreamResponse}
 */
proto.proto.KeyboardTextChunkStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setText(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardTextChunkStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardTextChunkStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardTextChunkStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardTextChunkStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getText();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string text = 1;
 * @return {string}
 */
proto.proto.KeyboardTextChunkStreamResponse.prototype.getText = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.KeyboardTextChunkStreamResponse} returns this
 */
proto.proto.KeyboardTextChunkStreamResponse.prototype.setText = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.KeyboardTextStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.KeyboardTextStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.KeyboardTextStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.KeyboardTextStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            text: jspb.Message.getFieldWithDefault(msg, 1, ""),
            modifiers: (f = msg.getModifiers()) && proto.proto.KeyboardModifiers.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyboardTextStreamResponse}
 */
proto.proto.KeyboardTextStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.KeyboardTextStreamResponse;
    return proto.proto.KeyboardTextStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyboardTextStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyboardTextStreamResponse}
 */
proto.proto.KeyboardTextStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setText(value);
                break;
            case 2:
                var value = new proto.proto.KeyboardModifiers;
                reader.readMessage(value, proto.proto.KeyboardModifiers.deserializeBinaryFromReader);
                msg.setModifiers(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyboardTextStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.KeyboardTextStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyboardTextStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyboardTextStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getText();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getModifiers();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.KeyboardModifiers.serializeBinaryToWriter);
    }
};
/**
 * optional string text = 1;
 * @return {string}
 */
proto.proto.KeyboardTextStreamResponse.prototype.getText = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.KeyboardTextStreamResponse} returns this
 */
proto.proto.KeyboardTextStreamResponse.prototype.setText = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional KeyboardModifiers modifiers = 2;
 * @return {?proto.proto.KeyboardModifiers}
 */
proto.proto.KeyboardTextStreamResponse.prototype.getModifiers = function () {
    return /** @type{?proto.proto.KeyboardModifiers} */ (jspb.Message.getWrapperField(this, proto.proto.KeyboardModifiers, 2));
};
/**
 * @param {?proto.proto.KeyboardModifiers|undefined} value
 * @return {!proto.proto.KeyboardTextStreamResponse} returns this
*/
proto.proto.KeyboardTextStreamResponse.prototype.setModifiers = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.KeyboardTextStreamResponse} returns this
 */
proto.proto.KeyboardTextStreamResponse.prototype.clearModifiers = function () {
    return this.setModifiers(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.KeyboardTextStreamResponse.prototype.hasModifiers = function () {
    return jspb.Message.getField(this, 2) != null;
};
goog.object.extend(exports, proto.proto);
